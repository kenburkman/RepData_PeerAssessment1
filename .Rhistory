install("lattice")
library("lattice")
?lattice
xyplot(c(1,2,3,4), c(4,5,3,5))
xyplot(c(1,2,3,4)~ c(4,5,3,5))
library(datasets)
xyplot(Ozone~Wind, data=airquality)
xyplot(Ozone~Wind, Month, data=airquality)
xyplot(Ozone~Wind, Month, data=airquality, layout=c(5,1))
xyplot(Ozone~Wind| Month, data=airquality, layout=c(5,1))
f<-xyplot(Ozone~Wind| Month, data=airquality, layout=c(5,1))
class(f)
print(f)
library(nlme)
library(lattice)
xyplot(weight~Time|Diet, BodyWeight)
?llines
library(ggplot2)
qplot(votes, rating, data = movies)
movies
swirl()
library(swirl)
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut())
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="ln"))
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
swirl()
dim(ssd)
names(ssd[,562-563])
names(ssd[,562:563])
table(ssd$subject)
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$subject)
table(ssd$activity)
sub1<-subset(ssd, subject=1)
sub1<-subset(ssd, subject==1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-sub1[,1:3]
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
msxCon<-which.max(svd1$v)
maxCon<-which.max(svd1$v)
maxCon<-which.max(svd1$v[,2])
mdist<-dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562:563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[,-c(562:563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
laying<-kClust(kClust$size==29)
laying<-(kClust$size==29)
laying<-which(kClust$size==29)
plot(kClust$center[laying,1:12], pch=19, ylab="Laying Cluster")
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size=19)
walkdown<-which(kClust$size==19)
walkdown<-which(kClust$size==49)
plot(kClust$center[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]], [wcol])
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
wcol
x0<-pm0$Sample.Value
sit(x0)
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(x0,x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1)
)
negative<-x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates, "%Y%m%d""))
)
dates<-as.Date(as.character(dates), "%Y%m%d"")
)
dates<-pm1$Date
dates<-as.Date(as.character(dates), "%Y%m%d)
dates<-as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site())
str(site)
str(site0)
intersect(site0, site1)
both<-intersect(site0, site1)
both
head(pm0)
cnt0<-subset(pm0, pm0$State.Code==36 & pm0$county.site %in% both)
cnt0<-subset(pm0, State.Code==36 & county.site %in% both)
cnt1<-subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site), nrow)
sapply(split(cnt1,cnt1$county.site), nrow)
pm0sub<-subset(cnt0, County.Code==63 & Site.ID=2008)
pm0sub<-subset(cnt0, County.Code=63 & Site.ID=2008)
pm0sub<-subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date), "Y%m%d")
dates0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline=median(pm25)
abline(median(x0sub), na.rm==TRUE, lwd=2,
)
abline((median(x0sub), na.rm==TRUE, lwd=2)
skip()
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub), na.rm==TRUE), lwd=2)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<-range(x0sub, x1sub, na.rm=TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value, State.Code, mean, na.rm=TRUE)
)
str(mn0)
mn1<-with(pm1,tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.fram(state==names(mn0), mean==mn0)
d0<-data.frame(state==names(mn0), mean==mn0)
d0<-data.frame(mn0$state==names(mn0), mn0$mean==mn0)
d0<-data.frame(state=names(mn0), mean=mn0)
d1<-data.frame(state=names(mn1), mean=mn1)
head(mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep, mrg[,2:3])
segments(rep, mrg[,2])
segments(rep, mrg[,2], meg[,3])
segments(rep, mrg[,2], mrg[,3])
skip()
mrg[mrg$mean.x<mrg$mean.y]
mrg[mrg$mean.x<mrg$mean.y,]
rm(list = ls())
options(width=60)
opts_chunk$set(size      = "footnotesize",
tidy      = FALSE,
fig.align = "center",
out.width = "0.48\\textwidth",
dev       = "pdf")
data(mtcars)
names(mtcars)
str(mtcars)
with(mtcars,
plot(wt,mpg))
abline(lm(mpg~wt, data=mtcars))
title("Regression of MPG on Weight")
pdf("myplot.pdf")
with(mtcars,plot(wt,
mpg,
main = "Regression of MPG on Weight",
xlab="weight",
ylab="miles per gallon"))
abline(lm(mpg~wt, data=mtcars))
dev.off()
data(iris)
str(iris)
with(iris, plot(Sepal.Length, Sepal.Width, main="Sepal Length
vs Width", xlab="Length", ylab="Width"))
head(CO2)
CO2_1 <- aggregate(uptake ~ conc,data=CO2, FUN=mean)
CO2_1 <- aggregate(uptake ~ conc,data=CO2, FUN=mean)
with(CO2_1,plot(conc,uptake,type = "b",
main = "Average Uptake across Concentration"))
CO2_1 <- aggregate(uptake ~ conc,data=CO2, FUN=mean)
with(CO2_1,plot(conc,uptake,type = "b",
main = "Average Uptake across Concentration",
lty=3,pch=5))
abline(25,0,lty=1)
# use this string to store the default parameters
# which you can then recall after you have made changes
opar <- par(no.readonly = TRUE)
par(lty = 2, pch = 17)
with(CO2_1,plot(conc,uptake,type="b"))
par(opar)
with(CO2_1,plot(conc,uptake, type = "b"))
# Ask for the list of different colors
colors()
with(CO2_1,plot(conc,uptake, type = "b", col="blue"))
title("Concentration versus Uptake", col.main="red")
hist(CO2$uptake,
breaks = 15,
main="Distribution of Uptake",
xlab="uptake")
##  boxplot(mpg ~ cyl, data = mtcars, main = "Car Mileage Data",
##          xlab = "Number of Cylinders",
##          ylab = "Miles Per Gallon")
boxplot(mpg ~ cyl, data = mtcars, main = "Car Milage Data",
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon")
## demo(graphics)
dotchart(t(VADeaths), xlim = c(0,100),
main = "Death Rates in Virginia - 1940")
library(ggplot2)
qplot(Sepal.Length, Petal.Length, data = iris, color = Species)
mtcars$cylinder <- as.factor(mtcars$cyl)
qplot(cylinder, mpg, data=mtcars, geom=c("boxplot"),
fill=cylinder,
main="Box plots with superimposed data points",
xlab= "Number of Cylinders",
ylab="Miles per Gallon")
## CO2_1 <- aggregate(uptake ~ conc,data=CO2,FUN=mean)
## p <- ggplot(CO2_1, aes(x = conc, y = uptake))
## p + geom_point()
##
## p + geom_line()
##
## p + geom_line() + geom_point()
## CO2_2 <- aggregate(uptake ~ conc + Treatment,data=CO2,FUN=mean)
## ggplot(CO2_2, aes(conc,uptake,color = factor(Treatment),
##                   group=factor(Treatment))) +
##   geom_point() +
##   geom_line()
##
## ggplot(CO2_2, aes(conc,uptake,group=factor(Treatment))) +
##   geom_point(aes(color = factor(Treatment)))+
##   geom_line(aes(lty=factor(Treatment)))
ggplot(mtcars, aes(x=cylinder,y=mpg)) +
geom_boxplot() +
labs(title="A long title for the \n Distribution
of MPG's across cylinders",x="Cyl",y="Miles Per Gallon")
ggplot(mtcars,aes(mpg)) + geom_histogram()
ggplot(CO2,aes(uptake)) +
geom_density(alpha=0.25,aes(fill=factor(Treatment))) +
scale_fill_discrete(name="Treatment")
ggplot(CO2,aes(uptake)) +
geom_density(alpha=0.5,fill="blue") +
facet_grid(Treatment ~ .)
ggplot(CO2,aes(uptake)) +
geom_density(alpha=0.5,fill="blue") +
facet_grid(Treatment ~ Type) +
theme(text=element_text(size=20)) + labs(title="Panel Plot")
The mean number of steps is`r meanSteps`.  The median number is `r medianSteps`.
options(scipen=999)
meanSteps<-mean(totalSteps$Total)
medianSteps<-median(totalSteps$Total)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
### Loading and preprocessing the data
```{r, echo=TRUE}
library(ggplot2)
library(lattice)
rm(list=ls())
setwd("~/R/Coursera/5-Reproducible Research/Week2-CourseProject/RepData_PeerAssessment1-master")
unzip("activity.zip")
activity<-read.csv("activity.csv", header=TRUE, sep=",")
```
### What is mean total number of steps taken per day?
#### Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
activitySubset<-subset(activity, subset=(steps>0))
totalSteps<-aggregate(activitySubset$steps, by=list(Category=activitySubset$date), FUN=sum)
colnames(totalSteps)<-c("Date", "Total")
qplot(totalSteps$Total)
```
#### Calculate and report the mean and median total number of steps taken per day
```{r, echo=TRUE}
options(scipen=999)
meanSteps<-mean(totalSteps$Total)
medianSteps<-median(totalSteps$Total)
```
The mean number of steps is `r meanSteps`.  The median number is `r medianSteps`.
### What is the average daily activity pattern?
#### Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r, echo=TRUE}
averageSteps<-aggregate(activitySubset$steps, by=list(activitySubset$interval), FUN=mean)
colnames(averageSteps)<-c("interval","average")
plot(averageSteps, type="l", main="Average Steps per Interval", xlab="Interval", ylab="Number of Steps")
```
#### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
averageSteps<-averageSteps[order(-averageSteps$average),]
maxAverageSteps<-averageSteps[1,1]
```
The maximum number of steps occurs, on average, at the `r maxAverageSteps` interval.
### Imputing missing values
#### Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r, echo=TRUE}
activityNA<-subset(activity, is.na(activity$steps)==TRUE)
colSums(is.na(activity))
```
There are `r length(activityNA$steps)` missing values in the dataset.
### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
#### Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r, echo=TRUE}
averageSteps<-averageSteps[order(averageSteps$interval),]
activity$complete<-ifelse(is.na(activity$steps), averageSteps[match(activity$interval, averageSteps$interval),2] ,activity$steps)
activity$complete<-ifelse(is.na(activity$complete), mean(activitySubset$steps) ,activity$complete)
```
#### Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r, echo=TRUE}
totalStepsComplete<-aggregate(activity$complete, by=list(Category=activity$date), FUN=sum)
colnames(totalStepsComplete)<-c("Date", "Total")
qplot(totalStepsComplete$Total)
meanStepsComplete<-mean(totalStepsComplete$Total)
medianStepsComplete<-median(totalStepsComplete$Total)
```
### Are there differences in activity patterns between weekdays and weekends?
#### Create a new factor variable in the dataset with two levels - "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r, echo=TRUE}
activity$day<-weekdays(as.Date(activity$date))
weekend<-c("Sunday", "Saturday")
activity$WEWD<-c("weekday", "weekend")[(activity$day %in% weekend)+1L]
```
#### Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was creating using simulated data.
```{r, echo=TRUE}
averageStepsComplete<-aggregate(activity$complete, by=list(activity$interval, activity$WEWD), FUN=mean)
colnames(averageStepsComplete)<-c("interval","WEWD", "steps")
xyplot(steps~interval|WEWD, data=averageStepsComplete, type="l", scales=list(y=list(relation="free")),layout=c(1,2), ylab="Average number of steps")
```
Yes, although periods of activity tend to be greater during the day, there are two major differences in the activity patterns between weekdays and weekends.
1. Weekends tend to have a greater number of steps over a longer period of time.
2. Weekdays have a spike in the morning that is greater than any of the weekend values.  Maybe that's when people are out for a morning run?
3. Weekend activity tapers off later than weekday activity.
